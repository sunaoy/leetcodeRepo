//bfs
class Solution {
    public boolean isBipartite(int[][] graph) {
        int[] visited = new int[graph.length];
        for (int i = 0; i < graph.length; i++) {
            if (visited[i] != 0) continue;

        Queue<Integer> queue = new LinkedList();
        queue.add(i);
        visited[i] = 1;
        while (!queue.isEmpty()) {
            int cur = queue.poll();
           // int cur_color = visited[cur];
            //int neigh_color = cur_color == 1 ? 1:-1;
            for (int neighbor : graph[cur]) {
                if(visited[neighbor] == 0){
                    visited[neighbor] = -visited[cur];
                    queue.add(neighbor);
                } else if (visited[neighbor] != -visited[cur]){
                    return false;
                }
            }

        }
    }
    return true;
    }
}

//DFS

class Solution {
     public boolean isBipartite(int[][] g) {
        int[] colors = new int[g.length];
        for (int i = 0; i < g.length; i++)
            if (colors[i] == 0 && !validColor(g, colors, 1, i))
                return false;
        return true;
    }

    boolean validColor(int[][] g, int[] colors, int color, int node) {
        if (colors[node] != 0)
            return colors[node] == color;
        colors[node] = color;
        for (int adjacent : g[node])
            if (!validColor(g, colors, -color, adjacent))
                return false;
        return true;
    }
}


// Java program to find out whether
// a given graph is Bipartite or not.
// Using recursion.
class GFG
{
    static final int V = 4;
 
    static boolean colorGraph(int G[][],
                              int color[],
                              int pos, int c)
    {
        if (color[pos] != -1 &&
            color[pos] != c)
            return false;
 
        // color this pos as c and
        // all its neighbours as 1-c
        color[pos] = c;
        boolean ans = true;
        for (int i = 0; i < V; i++)
        {
            if (G[pos][i] == 1)
            {
                if (color[i] == -1)
                    ans &= colorGraph(G, color, i, 1 - c);
 
                if (color[i] != -1 && color[i] != 1 - c)
                    return false;
            }
            if (!ans)
                return false;
        }
        return true;
    }
 
    static boolean isBipartite(int G[][])
    {
        int[] color = new int[V];
        for (int i = 0; i < V; i++)
            color[i] = -1;
 
        // start is vertex 0;
        int pos = 0;
     
        // two colors 1 and 0
        return colorGraph(G, color, pos, 1);
    }
 
    // Driver Code
    public static void main(String[] args)
    {
        int G[][] = { { 0, 1, 0, 1 },
                      { 1, 0, 1, 0 },
                      { 0, 1, 0, 1 },
                      { 1, 0, 1, 0 } };
 
        if (isBipartite(G))
            System.out.print("Yes");
        else
            System.out.print("No");
    }
}


//
import java.util.*;

public class GFG{
	
	static class Pair{
		int first, second;
		
		Pair(int f, int s){
			first = f;
			second = s;
		}
	}
	
	static boolean isBipartite(int V, ArrayList<ArrayList<Integer>> adj)
	{
	
		// vector to store colour of vertex
		// assigning all to -1 i.e. uncoloured
		// colours are either 0 or 1
		// for understanding take 0 as red and 1 as blue
		int col[] = new int[V];
		Arrays.fill(col, -1);
	
		// queue for BFS storing {vertex , colour}
		Queue<Pair> q = new LinkedList<Pair>();
	
		//loop incase graph is not connected
		for (int i = 0; i < V; i++) {
		
		// if not coloured
			if (col[i] == -1) {
			
			// colouring with 0 i.e. red
				q.add(new Pair(i, 0));
				col[i] = 0;
			
				while (!q.isEmpty()) {
					Pair p = q.peek();
					q.poll();
				
					//current vertex
					int v = p.first;
				
					// colour of current vertex
					int c = p.second;
					
					// traversing vertexes connected to current vertex
					for (int j : adj.get(v))
					{
					
						// if already coloured with parent vertex color
						// then bipartite graph is not possible
						if (col[j] == c)
							return false;
					
						// if uncoloured
						if (col[j] == -1)
						{
						
						// colouring with opposite color to that of parent
							col[j] = (c==1) ? 0 : 1;
							q.add(new Pair(j, col[j]));
						}
					}
				}
			}
		}
	
		// if all vertexes are coloured such that
		// no two connected vertex have same colours
		return true;
	}
	
	// Driver Code Starts.
	public static void main(String args[])
	{
	
		int V, E;
		V = 4 ;
		E = 8;
		
		// adjacency list for storing graph
		ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
		
		for(int i = 0; i < V; i++){
			adj.add(new ArrayList<Integer>());
		}
		
		adj.get(0).add(1);
		adj.get(0).add(3);
		
		adj.get(1).add(0);
		adj.get(1).add(2);
		
		adj.get(2).add(1);
		adj.get(2).add(3);
		
		adj.get(3).add(0);
		adj.get(3).add(2);
		
		boolean ans = isBipartite(V, adj);
		
		// returns 1 if bipartite graph is possible
		if (ans)
			System.out.println("Yes");
	
		// returns 0 if bipartite graph is not possible
		else
			System.out.println("No");
	
	}
}

